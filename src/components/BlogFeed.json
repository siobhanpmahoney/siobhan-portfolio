{
    "status": "ok",
    "feed": {
        "url": "https://medium.com/feed/@siobhanpmahoney",
        "title": "Stories by Siobhan Mahoney on Medium",
        "link": "https://medium.com/@siobhanpmahoney?source=rss-9fe5514d22cb------2",
        "author": "",
        "description": "Stories by Siobhan Mahoney on Medium",
        "image": "https://cdn-images-1.medium.com/fit/c/150/150/1*02BozbWchGdn4HCRXPoVFw.jpeg"
    },
    "items": [
        {
            "title": "Deploying a React Frontend/Rails Backend Project to Heroku",
            "pubDate": "2018-04-08 17:38:13",
            "link": "https://medium.com/@siobhanpmahoney/deploying-a-react-frontend-rails-backend-project-to-heroku-4b2c4f6f630c?source=rss-9fe5514d22cb------2",
            "guid": "https://medium.com/p/4b2c4f6f630c",
            "author": "Siobhan Mahoney",
            "thumbnail": "https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4b2c4f6f630c",
            "description": "\n<p>I recently deployed a <a href=\"https://chatster-app.herokuapp.com/login\">project</a> with a Rails backend and React frontend to Heroku and wanted to share my experience with the process, since it is not entirely obvious.</p>\n<h3>Preparing Project for Deployment</h3>\n<p>Before moving forward, you’ll want to take the following steps to prepare your project:</p>\n<ol>\n<li>You have already started building your frontend and backend (using create-react-app [app-name] and rails g project-name).</li>\n<li>Your app is configured to use the <strong>PostgreSQL</strong> database (note<strong>: </strong>please see <a href=\"https://medium.com/@siobhanpmahoney?source=rss-9fe5514d22cb------2#1bba\"><strong>below</strong></a> for information on updating your configuration<strong>).</strong>\n</li>\n<li>Both the frontend and backend portions of your project have been initialized to Git as <strong>separate repositories (note: </strong>this is important).</li>\n<li>Your frontend Node.js package manager is <a href=\"https://yarnpkg.com/en/\"><strong>Yarn</strong></a><strong> </strong>(note<strong>:</strong> please see <a href=\"https://medium.com/@siobhanpmahoney?source=rss-9fe5514d22cb------2#38dc\"><strong>below</strong></a> for more information on updating)</li>\n</ol>\n<h4>Configuring App to Use PostgreSQL</h4>\n<p>If you had not specified PostgreSQL when generating your Rails app (i.e. including --database=postgresql after rails g [app-name]), your app is most likely configured to SQLite3. Here’s how to change it:</p>\n<ol>\n<li>Update your Gemfile — locate gem 'sqlite3' and<strong> replace </strong>with<strong> </strong>gem 'pg'</li>\n<li>Re-install your dependencies (to generate a new Gemfile.lock) by running <strong>bundle install</strong>\n</li>\n<li>Ensure the config/database.yml is using the <strong>postgresql adapter</strong>, similar to:</li>\n</ol>\n<pre>default: &amp;default<br>  adapter: postgresql<br>  encoding: unicode<br>  pool: &lt;%= ENV.fetch(\"RAILS_MAX_THREADS\") { 5 } %&gt;</pre>\n<h4>Updating Node.js Package Manager to Yarn</h4>\n<p>This definitely tripped me up, as I had been using NPM. To switch to <a href=\"https://yarnpkg.com/en/\">Yarn</a>, run the following in your console:</p>\n<ol>\n<li>Install Yarn: brew install Yarn</li>\n<li>Reinstall packages using Yarn add [package-name]</li>\n</ol>\n<h3>Deploying App to Heroku</h3>\n<p>It is important to note that the frontend and backend portions of our app will be deployed to Heroku as <strong>separate apps</strong>. Using my recently deployed project as an example, I will be referring to<strong>chatster-app-api</strong>, my Rails backend git repo, and<strong>chatster-app-frontend</strong>, my React frontend git repo.</p>\n<p>Before getting started, you’ll want to:</p>\n<ol>\n<li>Push all changes to Git</li>\n<li>Create a Heroku account</li>\n<li>Install the Heroku CLI</li>\n</ol>\n<h4>Step 1: Deploying Rails Backend</h4>\n<ul>\n<li>Navigate into the directory housing your project’s Rails backend: cd chatster-app-api</li>\n<li><strong>Sign into Heroku:</strong></li>\n</ul>\n<pre>heroku login</pre>\n<ul><li><strong>Create Heroku project</strong></li></ul>\n<pre>heroku create chatster-app-api</pre>\n<ul><li><strong>Initialize heroku git remote</strong></li></ul>\n<pre>git remote add heroku git@heroku.com:chatser-app-api.git</pre>\n<ul><li><strong>Add, commit, and push repository to your Heroku’s remote:</strong></li></ul>\n<pre>git add .</pre>\n<pre>git commit -m \"first heroku commit\" </pre>\n<pre>git push heroku master</pre>\n<ul><li><strong>Migrate your database</strong></li></ul>\n<pre>heroku run rake db:migrate</pre>\n<p>And, you’re done!</p>\n<h4>Step 2: Deploying React Frontend</h4>\n<ol><li>Create file in your project’s <strong>root directory</strong> titled static.json that has the following code:</li></ol>\n<pre>{ \"root\": \"build/\", \"routes\": { \"/**\": \"index.html\" } }</pre>\n<p><strong>2. Update paths in fetch requests, or any other reference to your Rails api, to the URL of your deployed backend:</strong></p>\n<p>Using my project as an example, this means replacing all references to <a href=\"http://localhost/\">http://localhost</a>:3000 with <a href=\"https://chatster-app-api.herokuapp.com/\">https://chatster-app-api.herokuapp.com</a></p>\n<p><strong>3. Create a Heroku app set to create-react-app-buildpack:</strong></p>\n<pre>heroku create chatster-app --buildpack https://github.com/mars/create-react-app-buildpack.git</pre>\n<p><strong>4</strong>. <strong>Initialize Heroku remote:</strong></p>\n<pre>git remote add heroku git@heroku.com:chatser-app.git</pre>\n<p><strong>5. Add, commit, and push repo to Heroku remote:</strong></p>\n<pre>git add .<br>git commit -m \"Start with create-react-app\"<br>git push heroku master</pre>\n<p><strong>6. Open app:</strong></p>\n<pre>heroku open</pre>\n<p>And, voilà! Your project is live!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4b2c4f6f630c\" width=\"1\" height=\"1\">\n",
            "content": "\n<p>I recently deployed a <a href=\"https://chatster-app.herokuapp.com/login\">project</a> with a Rails backend and React frontend to Heroku and wanted to share my experience with the process, since it is not entirely obvious.</p>\n<h3>Preparing Project for Deployment</h3>\n<p>Before moving forward, you’ll want to take the following steps to prepare your project:</p>\n<ol>\n<li>You have already started building your frontend and backend (using create-react-app [app-name] and rails g project-name).</li>\n<li>Your app is configured to use the <strong>PostgreSQL</strong> database (note<strong>: </strong>please see <a href=\"https://medium.com/@siobhanpmahoney?source=rss-9fe5514d22cb------2#1bba\"><strong>below</strong></a> for information on updating your configuration<strong>).</strong>\n</li>\n<li>Both the frontend and backend portions of your project have been initialized to Git as <strong>separate repositories (note: </strong>this is important).</li>\n<li>Your frontend Node.js package manager is <a href=\"https://yarnpkg.com/en/\"><strong>Yarn</strong></a><strong> </strong>(note<strong>:</strong> please see <a href=\"https://medium.com/@siobhanpmahoney?source=rss-9fe5514d22cb------2#38dc\"><strong>below</strong></a> for more information on updating)</li>\n</ol>\n<h4>Configuring App to Use PostgreSQL</h4>\n<p>If you had not specified PostgreSQL when generating your Rails app (i.e. including --database=postgresql after rails g [app-name]), your app is most likely configured to SQLite3. Here’s how to change it:</p>\n<ol>\n<li>Update your Gemfile — locate gem 'sqlite3' and<strong> replace </strong>with<strong> </strong>gem 'pg'</li>\n<li>Re-install your dependencies (to generate a new Gemfile.lock) by running <strong>bundle install</strong>\n</li>\n<li>Ensure the config/database.yml is using the <strong>postgresql adapter</strong>, similar to:</li>\n</ol>\n<pre>default: &amp;default<br>  adapter: postgresql<br>  encoding: unicode<br>  pool: &lt;%= ENV.fetch(\"RAILS_MAX_THREADS\") { 5 } %&gt;</pre>\n<h4>Updating Node.js Package Manager to Yarn</h4>\n<p>This definitely tripped me up, as I had been using NPM. To switch to <a href=\"https://yarnpkg.com/en/\">Yarn</a>, run the following in your console:</p>\n<ol>\n<li>Install Yarn: brew install Yarn</li>\n<li>Reinstall packages using Yarn add [package-name]</li>\n</ol>\n<h3>Deploying App to Heroku</h3>\n<p>It is important to note that the frontend and backend portions of our app will be deployed to Heroku as <strong>separate apps</strong>. Using my recently deployed project as an example, I will be referring to<strong>chatster-app-api</strong>, my Rails backend git repo, and<strong>chatster-app-frontend</strong>, my React frontend git repo.</p>\n<p>Before getting started, you’ll want to:</p>\n<ol>\n<li>Push all changes to Git</li>\n<li>Create a Heroku account</li>\n<li>Install the Heroku CLI</li>\n</ol>\n<h4>Step 1: Deploying Rails Backend</h4>\n<ul>\n<li>Navigate into the directory housing your project’s Rails backend: cd chatster-app-api</li>\n<li><strong>Sign into Heroku:</strong></li>\n</ul>\n<pre>heroku login</pre>\n<ul><li><strong>Create Heroku project</strong></li></ul>\n<pre>heroku create chatster-app-api</pre>\n<ul><li><strong>Initialize heroku git remote</strong></li></ul>\n<pre>git remote add heroku git@heroku.com:chatser-app-api.git</pre>\n<ul><li><strong>Add, commit, and push repository to your Heroku’s remote:</strong></li></ul>\n<pre>git add .</pre>\n<pre>git commit -m \"first heroku commit\" </pre>\n<pre>git push heroku master</pre>\n<ul><li><strong>Migrate your database</strong></li></ul>\n<pre>heroku run rake db:migrate</pre>\n<p>And, you’re done!</p>\n<h4>Step 2: Deploying React Frontend</h4>\n<ol><li>Create file in your project’s <strong>root directory</strong> titled static.json that has the following code:</li></ol>\n<pre>{ \"root\": \"build/\", \"routes\": { \"/**\": \"index.html\" } }</pre>\n<p><strong>2. Update paths in fetch requests, or any other reference to your Rails api, to the URL of your deployed backend:</strong></p>\n<p>Using my project as an example, this means replacing all references to <a href=\"http://localhost/\">http://localhost</a>:3000 with <a href=\"https://chatster-app-api.herokuapp.com/\">https://chatster-app-api.herokuapp.com</a></p>\n<p><strong>3. Create a Heroku app set to create-react-app-buildpack:</strong></p>\n<pre>heroku create chatster-app --buildpack https://github.com/mars/create-react-app-buildpack.git</pre>\n<p><strong>4</strong>. <strong>Initialize Heroku remote:</strong></p>\n<pre>git remote add heroku git@heroku.com:chatser-app.git</pre>\n<p><strong>5. Add, commit, and push repo to Heroku remote:</strong></p>\n<pre>git add .<br>git commit -m \"Start with create-react-app\"<br>git push heroku master</pre>\n<p><strong>6. Open app:</strong></p>\n<pre>heroku open</pre>\n<p>And, voilà! Your project is live!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4b2c4f6f630c\" width=\"1\" height=\"1\">\n",
            "enclosure": {},
            "categories": [
                "heroku",
                "react",
                "postgresql",
                "rails-5"
            ]
        },
        {
            "title": "Portals in React.js",
            "pubDate": "2018-02-08 04:34:32",
            "link": "https://medium.com/@siobhanpmahoney/portals-in-react-js-5d98bb89797c?source=rss-9fe5514d22cb------2",
            "guid": "https://medium.com/p/5d98bb89797c",
            "author": "Siobhan Mahoney",
            "thumbnail": "https://cdn-images-1.medium.com/max/560/1*atfNCJsJTb0GrisWDUuq0g.png",
            "description": "\n<h4><strong>What is a portal?</strong></h4>\n<p>In React, portals can be used to render an element outside of its parent component’s DOM node while preserving its position in the React hierarchy, allowing it to maintain the properties and behaviors it inherited from the React tree. As noted in the <a href=\"https://reactjs.org/docs/portals.html#event-bubbling-through-portals\">React documentation</a>, “this includes event bubbling. An event fired from inside a portal will propagate to ancestors in the containing React tree, even if those elements are not ancestors in the DOM tree.”</p>\n<p>By maintaining such status, events fired from a portal will propagate to its React ancestors regardless of the relationship within the DOM.</p>\n<a href=\"https://medium.com/media/494913f574bc66b88f2b6086a8d329ec/href\">https://medium.com/media/494913f574bc66b88f2b6086a8d329ec/href</a><h3><strong>Beyond the Parent’s DOM</strong></h3>\n<p>Portals can also render an element <em>outside</em> of its parent’s document. In the below example provided by <a href=\"https://hackernoon.com/using-a-react-16-portal-to-do-something-cool-2a2d627b0202\">David Gilbertson</a>, &lt;MyWindowPortal&gt; accomplishes two things:</p>\n<p>1. Opens a new window upon mounting; and</p>\n<p>2. Creates the portal and inserts props.children into the new window of the body</p>\n<a href=\"https://medium.com/media/8a22d0edb2575b07b97ec2f4a357097f/href\">https://medium.com/media/8a22d0edb2575b07b97ec2f4a357097f/href</a><h3><strong>Examples:</strong></h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/560/1*atfNCJsJTb0GrisWDUuq0g.png\"></figure><p>Portals can be handy for features that may overflow from the parent component, have a hidden or z-index style, or may otherwise need to be separated from its parent container. Common use-cases include:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/275/1*8yqVbjFrtmTv3ml40wqViQ.png\"></figure><ul>\n<li>global message notifications</li>\n<li>hovercards</li>\n<li>chat widgets</li>\n<li>tooltips</li>\n</ul>\n<h3><strong>How It Works</strong></h3>\n<p>The Portal API was introduced in React 16 as fully supported feature. Prior to its release, the only types of renderable children had been limited to JSX, React Elements, and null /false (which would not render anything). Building the portal functionality could be pretty complicated and involved mounting ReactDOM.unstable_renderSubtreeIntoContainer() to document.body.appendChild().</p>\n<p>With React 16, however, all we need is a simple:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/884/1*55M-k_NpLz5TtrW5MqQfZg.jpeg\"></figure><p>The first argument, child is any renderable React child, including a React component or HTML element.” The second argument (container) is the DOM element to which child will be rendered.</p>\n<p>Let’s take a look at the code for the example provided in React’s documentation:</p>\n<a href=\"https://medium.com/media/014a26bbecdc33d8973c5710dd16e25e/href\">https://medium.com/media/014a26bbecdc33d8973c5710dd16e25e/href</a><ul>\n<li>Use componentDidMount() to establish relationship between child (el) and parent (modalRoot) in the React tree</li>\n<li>Use componentWillUnMount() to remove child from the DOM when unmounted</li>\n<li>In render(), pass any React child (e.g., JSX, strings, arrays) and the the DOM element to ReactDOM.createPortal()</li>\n<li>The placement of the modal is defined in the CSS file</li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5d98bb89797c\" width=\"1\" height=\"1\">\n",
            "content": "\n<h4><strong>What is a portal?</strong></h4>\n<p>In React, portals can be used to render an element outside of its parent component’s DOM node while preserving its position in the React hierarchy, allowing it to maintain the properties and behaviors it inherited from the React tree. As noted in the <a href=\"https://reactjs.org/docs/portals.html#event-bubbling-through-portals\">React documentation</a>, “this includes event bubbling. An event fired from inside a portal will propagate to ancestors in the containing React tree, even if those elements are not ancestors in the DOM tree.”</p>\n<p>By maintaining such status, events fired from a portal will propagate to its React ancestors regardless of the relationship within the DOM.</p>\n<a href=\"https://medium.com/media/494913f574bc66b88f2b6086a8d329ec/href\">https://medium.com/media/494913f574bc66b88f2b6086a8d329ec/href</a><h3><strong>Beyond the Parent’s DOM</strong></h3>\n<p>Portals can also render an element <em>outside</em> of its parent’s document. In the below example provided by <a href=\"https://hackernoon.com/using-a-react-16-portal-to-do-something-cool-2a2d627b0202\">David Gilbertson</a>, &lt;MyWindowPortal&gt; accomplishes two things:</p>\n<p>1. Opens a new window upon mounting; and</p>\n<p>2. Creates the portal and inserts props.children into the new window of the body</p>\n<a href=\"https://medium.com/media/8a22d0edb2575b07b97ec2f4a357097f/href\">https://medium.com/media/8a22d0edb2575b07b97ec2f4a357097f/href</a><h3><strong>Examples:</strong></h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/560/1*atfNCJsJTb0GrisWDUuq0g.png\"></figure><p>Portals can be handy for features that may overflow from the parent component, have a hidden or z-index style, or may otherwise need to be separated from its parent container. Common use-cases include:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/275/1*8yqVbjFrtmTv3ml40wqViQ.png\"></figure><ul>\n<li>global message notifications</li>\n<li>hovercards</li>\n<li>chat widgets</li>\n<li>tooltips</li>\n</ul>\n<h3><strong>How It Works</strong></h3>\n<p>The Portal API was introduced in React 16 as fully supported feature. Prior to its release, the only types of renderable children had been limited to JSX, React Elements, and null /false (which would not render anything). Building the portal functionality could be pretty complicated and involved mounting ReactDOM.unstable_renderSubtreeIntoContainer() to document.body.appendChild().</p>\n<p>With React 16, however, all we need is a simple:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/884/1*55M-k_NpLz5TtrW5MqQfZg.jpeg\"></figure><p>The first argument, child is any renderable React child, including a React component or HTML element.” The second argument (container) is the DOM element to which child will be rendered.</p>\n<p>Let’s take a look at the code for the example provided in React’s documentation:</p>\n<a href=\"https://medium.com/media/014a26bbecdc33d8973c5710dd16e25e/href\">https://medium.com/media/014a26bbecdc33d8973c5710dd16e25e/href</a><ul>\n<li>Use componentDidMount() to establish relationship between child (el) and parent (modalRoot) in the React tree</li>\n<li>Use componentWillUnMount() to remove child from the DOM when unmounted</li>\n<li>In render(), pass any React child (e.g., JSX, strings, arrays) and the the DOM element to ReactDOM.createPortal()</li>\n<li>The placement of the modal is defined in the CSS file</li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5d98bb89797c\" width=\"1\" height=\"1\">\n",
            "enclosure": {},
            "categories": [
                "javascript"
            ]
        },
        {
            "title": "A Brief Introduction to Web Workers",
            "pubDate": "2018-01-16 14:26:26",
            "link": "https://medium.com/@siobhanpmahoney/a-brief-introduction-to-web-workers-e5d6e39d9d28?source=rss-9fe5514d22cb------2",
            "guid": "https://medium.com/p/e5d6e39d9d28",
            "author": "Siobhan Mahoney",
            "thumbnail": "https://cdn-images-1.medium.com/max/558/1*wUbNoCwSV6OsjVN1-D7nQw.png",
            "description": "\n<p>A web worker is a tool for multithreading in natively single-threaded Javascript programs. Introduced with HTML5, and web workers are nearly ubiquitous across browsers today — just log “Worker” into your browser console and you will see worker constructor function is already there and ready to be utilized.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/558/1*wUbNoCwSV6OsjVN1-D7nQw.png\"></figure><h4><strong>What’s the big deal?</strong></h4>\n<p>Because a Javascript program and UI events run in a single thread, the UI will fail to update and freeze if its callstack is too bogged down.</p>\n<p>Enter web workers, which run in the background and communicate with the main thread via messages. With webworkers, programs can delegate tasks such as processing large data troves while the main thread is free to process UI events , improving program efficiency and the overall user experience. For example, a worker could handle a large JSON file to mine relevant information to display in the UI.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/582/1*JT6Z2FGtV2l9eEmXRLdxLA.png\"></figure><h4><strong>Web Worker Applications:</strong></h4>\n<ol>\n<li>Reading/writing local storage databases</li>\n<li>Real time text formatting, spell checking, and syntax highlighting</li>\n<li>Filtering images in a canvas</li>\n<li>Processing large JSON datasets</li>\n<li>Processing multimedia (audio and video)</li>\n<li>Complicated math formulas, such as finding the largest prime number</li>\n</ol>\n<h4>Example: Filtering Images in a Canvas</h4>\n<figure><a href=\"https://nerget.com/rayjs-mt/rayjs.html\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/201/1*_KDPubHx_0j2tlEjhyqclw.png\"></a></figure><p>As<a href=\"https://johnresig.com/blog/web-workers/\"> John Resig</a> explains, “this demo makes use of Canvas to draw out a rendered scene…. when you turn on the workers, the scene is drawn in pieces. This is working by telling a worker to compute a slice of pixels. The worker responds with an array of colors to draw on the Canvas and the parent page changes the canvas.”</p>\n<h4>The Code:</h4>\n<p>Workers are created and executed in one of the main program files with their code housed in a separate file. As demonstrated below, a worker is built using the Worker constructor method, which takes a parameter of worker.js, the Javascript file storing the worker code.</p>\n<p>Using .postMessage(), the parent thread can communicate messages to its workers. .postMessage() is a cross-origin API the can transmit primitive data and JSON structures, but not functions.</p>\n<p>The parent code may also have a callback function that listens for a response from the worker confirming its work is complete in order for it to enact another action. As in the example below, the callback function will contain a target, which identifies the worker ( 'message') , and data, or the message posted by the worker.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/806/1*Mmy_tfDipC6FvjKFgIPTNw.png\"></figure><p>Meanwhile, the worker, living in its own file, stands by with an eventListener waiting to be called. When it receives the message event from the parent code, it likewise communicates its response via the postMessage method.</p>\n<h4>A Note of Caution:</h4>\n<p>Since workers are resource intensive, it is good practice to <strong>terminate</strong> them once their jobs are complete. This can be accomplished either in the primary code :</p>\n<pre>worker.terminate()</pre>\n<p>Alternatively, the worker can terminate itself:</p>\n<pre>self.close();</pre>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e5d6e39d9d28\" width=\"1\" height=\"1\">\n",
            "content": "\n<p>A web worker is a tool for multithreading in natively single-threaded Javascript programs. Introduced with HTML5, and web workers are nearly ubiquitous across browsers today — just log “Worker” into your browser console and you will see worker constructor function is already there and ready to be utilized.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/558/1*wUbNoCwSV6OsjVN1-D7nQw.png\"></figure><h4><strong>What’s the big deal?</strong></h4>\n<p>Because a Javascript program and UI events run in a single thread, the UI will fail to update and freeze if its callstack is too bogged down.</p>\n<p>Enter web workers, which run in the background and communicate with the main thread via messages. With webworkers, programs can delegate tasks such as processing large data troves while the main thread is free to process UI events , improving program efficiency and the overall user experience. For example, a worker could handle a large JSON file to mine relevant information to display in the UI.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/582/1*JT6Z2FGtV2l9eEmXRLdxLA.png\"></figure><h4><strong>Web Worker Applications:</strong></h4>\n<ol>\n<li>Reading/writing local storage databases</li>\n<li>Real time text formatting, spell checking, and syntax highlighting</li>\n<li>Filtering images in a canvas</li>\n<li>Processing large JSON datasets</li>\n<li>Processing multimedia (audio and video)</li>\n<li>Complicated math formulas, such as finding the largest prime number</li>\n</ol>\n<h4>Example: Filtering Images in a Canvas</h4>\n<figure><a href=\"https://nerget.com/rayjs-mt/rayjs.html\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/201/1*_KDPubHx_0j2tlEjhyqclw.png\"></a></figure><p>As<a href=\"https://johnresig.com/blog/web-workers/\"> John Resig</a> explains, “this demo makes use of Canvas to draw out a rendered scene…. when you turn on the workers, the scene is drawn in pieces. This is working by telling a worker to compute a slice of pixels. The worker responds with an array of colors to draw on the Canvas and the parent page changes the canvas.”</p>\n<h4>The Code:</h4>\n<p>Workers are created and executed in one of the main program files with their code housed in a separate file. As demonstrated below, a worker is built using the Worker constructor method, which takes a parameter of worker.js, the Javascript file storing the worker code.</p>\n<p>Using .postMessage(), the parent thread can communicate messages to its workers. .postMessage() is a cross-origin API the can transmit primitive data and JSON structures, but not functions.</p>\n<p>The parent code may also have a callback function that listens for a response from the worker confirming its work is complete in order for it to enact another action. As in the example below, the callback function will contain a target, which identifies the worker ( 'message') , and data, or the message posted by the worker.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/806/1*Mmy_tfDipC6FvjKFgIPTNw.png\"></figure><p>Meanwhile, the worker, living in its own file, stands by with an eventListener waiting to be called. When it receives the message event from the parent code, it likewise communicates its response via the postMessage method.</p>\n<h4>A Note of Caution:</h4>\n<p>Since workers are resource intensive, it is good practice to <strong>terminate</strong> them once their jobs are complete. This can be accomplished either in the primary code :</p>\n<pre>worker.terminate()</pre>\n<p>Alternatively, the worker can terminate itself:</p>\n<pre>self.close();</pre>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e5d6e39d9d28\" width=\"1\" height=\"1\">\n",
            "enclosure": {},
            "categories": [
                "javascript"
            ]
        },
        {
            "title": "Useful Gems for Debugging",
            "pubDate": "2017-12-19 14:55:31",
            "link": "https://medium.com/@siobhanpmahoney/useful-gems-for-debugging-340ce7e39987?source=rss-9fe5514d22cb------2",
            "guid": "https://medium.com/p/340ce7e39987",
            "author": "Siobhan Mahoney",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*Kn7H7ORF4fao6ghRi-UFDg.png",
            "description": "\n<p>I’ve spent more than my fair of time debugging my own code. And even though the culprit is usually something like stray punctuation mark or mispelled variable buried deep in a subdirectory’s subdirectory, it can be tough to shake the feelings of imposter syndrome that percolated during the hours spent toiling over every typed character, questioning your fundamental understanding of the material.</p>\n<p>Such experiences led me to look into debugging tools available for Ruby developers. While there doesn’t seem to be anything available to completely replace old fashioned diligence, care, and testing as you code, I did find several useful tools that may help streamline the debugging process.</p>\n<ol><li><strong>Better Errors</strong></li></ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Kn7H7ORF4fao6ghRi-UFDg.png\"><figcaption>Syntax error displayed in Better Error error page</figcaption></figure><p>The Better Errors gem facilitates the debugging process by offering an error page brimming with useful information. Such useful features <a href=\"https://github.com/charliesome/better_errors/wiki\">include</a>:</p>\n<ul>\n<li>Syntax-highlighted source code inspection for all stack frames, with specific line in which the error appears flagged</li>\n<li>A terminal for each stack frame, allowing for live interaction with source code</li>\n<li>Details on local and instance variables</li>\n<li>Download instructions</li>\n</ul>\n<p><strong>Why It’s Helpful: </strong>Although the information provided by Better_Errors may also be available via other avenues (e.g., the standard Rails error page, the running log in your console, etc.), Better_Errors helps streamline the debugging process by consolidating these key details in a readbable format. Plus, the live REPL shell for each stackframe makes for a less disruptive debugging process than using a traditional Pry.</p>\n<p><a href=\"https://github.com/charliesome/better_errors\">Installation Instructions &amp; Documentation</a></p>\n<p><strong>2. Did You Mean?</strong></p>\n<p>For those who have a hard time avoiding typos, the<strong> Did You Mean?</strong> gem adds class, method, and attribute suggestions to your error messages. Also, the Did You Mean? suggestions are generated in your terminal log AND in the header of the Rails error page:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZMZL6Tq1-w6mikZw1WgFLg.png\"><figcaption>Did You Mean? Suggestion in console</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JKnpp8Easy7hYft_J4rKNw.png\"><figcaption>Did You Mean? Suggestion in Browser</figcaption></figure><p>Think of it as a sort of spell check tool, but instead of sourcing a regular dictionary, it bases its suggestions on your program’s code. Although it’s not a catchall, it does help narrow down the search for the location of your breaking code.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*K72vPiES3MkWH7UdAIUmrA.png\"><figcaption>Example of Incorrect Analysis</figcaption></figure><p>For installation instructions and documentation, check out Did You Mean? on <a href=\"https://rubygems.org/gems/did_you_mean/versions/1.2.0\">rubygems.org</a> and the repo on GitHub. (<strong>Note: </strong>if working with Ruby 2.3.0, specify gem version 1.0.3 during installation and when listing in your program’s Gemfile:</p>\n<p>gem install did_you_mean -v 1.0.3</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=340ce7e39987\" width=\"1\" height=\"1\">\n",
            "content": "\n<p>I’ve spent more than my fair of time debugging my own code. And even though the culprit is usually something like stray punctuation mark or mispelled variable buried deep in a subdirectory’s subdirectory, it can be tough to shake the feelings of imposter syndrome that percolated during the hours spent toiling over every typed character, questioning your fundamental understanding of the material.</p>\n<p>Such experiences led me to look into debugging tools available for Ruby developers. While there doesn’t seem to be anything available to completely replace old fashioned diligence, care, and testing as you code, I did find several useful tools that may help streamline the debugging process.</p>\n<ol><li><strong>Better Errors</strong></li></ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Kn7H7ORF4fao6ghRi-UFDg.png\"><figcaption>Syntax error displayed in Better Error error page</figcaption></figure><p>The Better Errors gem facilitates the debugging process by offering an error page brimming with useful information. Such useful features <a href=\"https://github.com/charliesome/better_errors/wiki\">include</a>:</p>\n<ul>\n<li>Syntax-highlighted source code inspection for all stack frames, with specific line in which the error appears flagged</li>\n<li>A terminal for each stack frame, allowing for live interaction with source code</li>\n<li>Details on local and instance variables</li>\n<li>Download instructions</li>\n</ul>\n<p><strong>Why It’s Helpful: </strong>Although the information provided by Better_Errors may also be available via other avenues (e.g., the standard Rails error page, the running log in your console, etc.), Better_Errors helps streamline the debugging process by consolidating these key details in a readbable format. Plus, the live REPL shell for each stackframe makes for a less disruptive debugging process than using a traditional Pry.</p>\n<p><a href=\"https://github.com/charliesome/better_errors\">Installation Instructions &amp; Documentation</a></p>\n<p><strong>2. Did You Mean?</strong></p>\n<p>For those who have a hard time avoiding typos, the<strong> Did You Mean?</strong> gem adds class, method, and attribute suggestions to your error messages. Also, the Did You Mean? suggestions are generated in your terminal log AND in the header of the Rails error page:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZMZL6Tq1-w6mikZw1WgFLg.png\"><figcaption>Did You Mean? Suggestion in console</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JKnpp8Easy7hYft_J4rKNw.png\"><figcaption>Did You Mean? Suggestion in Browser</figcaption></figure><p>Think of it as a sort of spell check tool, but instead of sourcing a regular dictionary, it bases its suggestions on your program’s code. Although it’s not a catchall, it does help narrow down the search for the location of your breaking code.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*K72vPiES3MkWH7UdAIUmrA.png\"><figcaption>Example of Incorrect Analysis</figcaption></figure><p>For installation instructions and documentation, check out Did You Mean? on <a href=\"https://rubygems.org/gems/did_you_mean/versions/1.2.0\">rubygems.org</a> and the repo on GitHub. (<strong>Note: </strong>if working with Ruby 2.3.0, specify gem version 1.0.3 during installation and when listing in your program’s Gemfile:</p>\n<p>gem install did_you_mean -v 1.0.3</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=340ce7e39987\" width=\"1\" height=\"1\">\n",
            "enclosure": {},
            "categories": [
                "ruby",
                "debugging"
            ]
        },
        {
            "title": "Dear Mod 1 Student-To-Be",
            "pubDate": "2017-12-08 14:47:34",
            "link": "https://medium.com/@siobhanpmahoney/dear-mod-1-student-to-be-6c17653e025f?source=rss-9fe5514d22cb------2",
            "guid": "https://medium.com/p/6c17653e025f",
            "author": "Siobhan Mahoney",
            "thumbnail": "https://cdn-images-1.medium.com/max/339/1*38KXFhFgqqIP5vUOALS5UQ.png",
            "description": "\n<p>Dear Mod 1 Student-To-Be,</p>\n<p>As a Mod 2-student-to-be, I wanted to extend a warm and preemptive “Welcome to Flatiron!”</p>\n<p>As I I stand here now, just a stone’s throw away from the sophomore module with a mini project, code challenge, and (by the end of this letter) blog post under my belt, I thought I’d take the opportunity to relate my exerpience of those first few weeks and impart some wisdom on what to expect, what to be prepared for, and what to be prepared to be unprepared for.</p>\n<p><strong>Here’s the good news</strong>: you should feel 100% confident about your coding aptitude. Admissions saw your work and recognized talent. Second, you’ve done (ahem, or should be doing) the pre-work — that’s great! You have the foundation to learn!</p>\n<p><strong>Now for the curveballs</strong>: You are going to spending a lot of time programming <em>with a team. </em>This is not bad news, of course, and is not a surprise (that’s part of the reason why you opted for the in-person program, right?), but turned out to be a surprisingly big adjustment during the first couple days.</p>\n<p><strong>Pre-Work vs. Mod 1</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/339/1*38KXFhFgqqIP5vUOALS5UQ.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/366/1*dI0-o7LSq-AEnq3ca41i6w.png\"></figure><p><strong>And, a note about project roadmapping</strong>: During the course of the prework, you’re coding according to the green light. But here’s the thing, when you get to the Mod 1 code challenge and final project, there is no green light. Not only that, but you’re won’t be coding according to a series of prompts outlined in a lab — you and your teammate will be mapping and testing all your own code! And while this is an exciting step forward, it can seem a bit overwhelming.</p>\n<p>That being said, don’t let yourself stress about transitioning to a collaborative setting — it’s only logical that it would take time getting used to after only existing with your programming work in a vaccuum during the lead up to your arrival on campus blindly following the green light. That being said, here are some helpful tips that might help smooth the transition:</p>\n<p>1. Communication: Don’t be afraid of silence: if you need to review or or refresh your memory about something, don’t hesitate to take several minutes to do so. While communication is essential, it is also isn’t helpful to carry on a discussion when you don’t understand the subject matter.</p>\n<p>2. Process: Divide and conquer. Git may seem terrifying, but familiarize yourself with processes like <strong>branching</strong>. No one likes a backseat programmer.</p>\n<p>3. Enthusiasum feeding off enthusiasm? Great! But keep it in check — replace “yes, and” with “yes, code” or “yes, test”… You’ll get a return of NoMethod error on 100% of the ideas you don’t code</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/470/1*WjM2HgcOEJ4K0wE5x1zhYQ.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/408/1*ieE9QpsmNaIcyufHFyW0DA.png\"></figure><p>Good luck!</p>\n<p>Siobhan</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6c17653e025f\" width=\"1\" height=\"1\">\n",
            "content": "\n<p>Dear Mod 1 Student-To-Be,</p>\n<p>As a Mod 2-student-to-be, I wanted to extend a warm and preemptive “Welcome to Flatiron!”</p>\n<p>As I I stand here now, just a stone’s throw away from the sophomore module with a mini project, code challenge, and (by the end of this letter) blog post under my belt, I thought I’d take the opportunity to relate my exerpience of those first few weeks and impart some wisdom on what to expect, what to be prepared for, and what to be prepared to be unprepared for.</p>\n<p><strong>Here’s the good news</strong>: you should feel 100% confident about your coding aptitude. Admissions saw your work and recognized talent. Second, you’ve done (ahem, or should be doing) the pre-work — that’s great! You have the foundation to learn!</p>\n<p><strong>Now for the curveballs</strong>: You are going to spending a lot of time programming <em>with a team. </em>This is not bad news, of course, and is not a surprise (that’s part of the reason why you opted for the in-person program, right?), but turned out to be a surprisingly big adjustment during the first couple days.</p>\n<p><strong>Pre-Work vs. Mod 1</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/339/1*38KXFhFgqqIP5vUOALS5UQ.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/366/1*dI0-o7LSq-AEnq3ca41i6w.png\"></figure><p><strong>And, a note about project roadmapping</strong>: During the course of the prework, you’re coding according to the green light. But here’s the thing, when you get to the Mod 1 code challenge and final project, there is no green light. Not only that, but you’re won’t be coding according to a series of prompts outlined in a lab — you and your teammate will be mapping and testing all your own code! And while this is an exciting step forward, it can seem a bit overwhelming.</p>\n<p>That being said, don’t let yourself stress about transitioning to a collaborative setting — it’s only logical that it would take time getting used to after only existing with your programming work in a vaccuum during the lead up to your arrival on campus blindly following the green light. That being said, here are some helpful tips that might help smooth the transition:</p>\n<p>1. Communication: Don’t be afraid of silence: if you need to review or or refresh your memory about something, don’t hesitate to take several minutes to do so. While communication is essential, it is also isn’t helpful to carry on a discussion when you don’t understand the subject matter.</p>\n<p>2. Process: Divide and conquer. Git may seem terrifying, but familiarize yourself with processes like <strong>branching</strong>. No one likes a backseat programmer.</p>\n<p>3. Enthusiasum feeding off enthusiasm? Great! But keep it in check — replace “yes, and” with “yes, code” or “yes, test”… You’ll get a return of NoMethod error on 100% of the ideas you don’t code</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/470/1*WjM2HgcOEJ4K0wE5x1zhYQ.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/408/1*ieE9QpsmNaIcyufHFyW0DA.png\"></figure><p>Good luck!</p>\n<p>Siobhan</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6c17653e025f\" width=\"1\" height=\"1\">\n",
            "enclosure": {},
            "categories": [
                "programming"
            ]
        }
    ]
}